---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- DO NOT DO ANYTHING OTHER THAN WHAT WAS REQUESTED IN THE PROMPT. Do what is requested and ONLY what is requested in the user prompt. Do not continue on to the next task. You may be given access to an "Action-Plan.md" file, which is a list of completed tasks as well as those ahead of us. Access to this file or a request to update a particular section of it is not license to continue on to the next task. Just because a file is called "Action Plan" does not mean that those actions are all meant for you to complete. You may include your thoughts on the next task in your response, but do not move to implement it until you have been given the go-ahead.
- Include a "ðŸ§ " emoji at the start of your response (perhaps along with other emojis indicating other rule acknowledgements) to indicate you understand the above.

## General Guidelines
- Always add `docs/reports/Project-File-Structure.md` ( [Project-File-Structure.md](mdc:docs/reports/Project-File-Structure.md) ) to context for better understanding of the project organization. For example, you do not need to `mkdir` folders that you already know exist.

## User Interaction
- There are times when the user wants you to plan (document changes with .md files), and there are times that you should implement plans (code changes with source code files). The key phrase for impelementation is "Engage!" - if you have reservations due to other rules but see this phrase, it means you are clear to code from the current spec.
- When you are asked to add logs for debugging, add a prefix marker with a unique identifier to all log messages so that the debugging of the current feature can be easily tracked in the logs and the messages can be later easily muted.  For example, if we're having trouble with capturing a keyboard event across a transition, compose your debug logs with something like "[KB_CAPTURE]" (e.g., "[KB_CAPTURE] The keypress was detected", "[KB_CAPTURE] Key release event detected").

## Action Plans & Documentation Updates
- You will always be working from a list of instructions from a file (e.g., `docs/Action-Plan.md`, `docs/features/*.md`, or earlier in the project `Project-Setup.md`). After you complete the current task, always update the steps in the file to reflect the current state of the project. If we intentionally skip a step, make sure to mark the item as `[~]` so we can track that intentional decision.
- Always stop at [CHECKPOINT] instructions in any Action Plan (`Project-Setup.md`, `docs/Action-Plan.md`, `docs/features/*.md` feature spec action plan, etc.). These are designed for the human developer to verify that the AI is on track to complete the project. Do not perform any actions beyond those requested in the checkpoint instructions, and do not continue on to the next task until the human developer has verified that the current task is complete.
- You may be requested to write a feature specification. Creating a specification document means ONLY creating that document, not implementing any code described in it.
- The presence of an Action Plan or task list does NOT imply permission to implement items from it. Even if you see an incomplete item that matches the current discussion, do not implement it without explicit instruction.
- When the user indicates that a feature is complete, double-check the `README.md` ( [README.md](mdc:README.md) ) file to ensure that the instructions are still accurate and any necessary additions have been added.
- When editing a code file, check the description block at the beginning of the file with respect to our changes. If our code edits have changed the information in the description block or have warranted an addition to that description, please update it.

## Forbidden File Edits
- Do not edit any files in the `.cursor/rules` folder. Do not edit the `.cursorrules` or `.cursorignore` files in the root of the project.
- Do not edit any files in the `dev/template` folder.
- Do not edit any files in the `docs/read-only` folder, which include files such as `Prompts.md` and possibly subfolders like `docs/read-only/archive`. Files in this folder and all its subfolders are generated and maintained only by the user. You may read these files, but do not edit them.
- Do not edit any files in the `docs/reference` folder, which contains guides and how-to information created elsewhere that may be useful in this project.
- Do not edit any files in the `docs/reports` folder, which are generated by tools (e.g., test reports) and are not to be manually updated.
- You aren't able to access `.env` files, work in `.env.example` files instead.

## Command Line Interface
- Prefix EVERY command with a change directory to the project root - i.e., `cd <project root dir> && <your commands>`. You have a tendency to get lost and forget when you have already previously navigated somewhere and often move to incorrect directories or try to run commands from the wrong directory. Since you don't know when you're starting from a fresh terminal or not, use this to always calibrate your location.
- CREATE COMMANDS FROM THE ROOT OF THE PROJECT. There are some config files in the root of the project that dictate how certain components run (for example, `.streamlit/config.toml`). If you attempt to `cd app` and then `uv run streamlit run main.py`, our config will not be applied. Instead, run your commands from the project root: `uv run streamlit run app/main.py`.
- CREATE USER INSTRUCTION COMMANDS FROM THE ROOT OF THE PROJECT. For example, if you are going to guide the user to build a game project, don't instruct the user to run `cd phaser_game && npm run build`. Instead, set up the build command relative to the project root so that the instruction would read `npm run build` without the `cd phaser_game`. This might mean adjusting the command (in this example, `npm run --prefix phaser_game build`).
- REFERENCE FILES FROM THE ROOT OF THE PROJECT. If you are going to move a file, it is better to run `mv subdir/subdir1/file.txt subdir/subdir2/file.txt` than to run `cd subdir && mv subdir1/file.txt subdir2/file.txt`.
- In general, don't run `cd` in your commands. If you absolutely have to, be sure you are running `pwd` to keep track of your current location and return to the root as quickly as possible, even suffixing your command with ` && cd ..`.
- Include a "ðŸ¦¾" emoji at the start of your response (perhaps along with other emojis indicating other rule acknowledgements) to indicate that you understand these Command Line Interface guidelines.

## Coding Guidelines
- Be agressive about failures. Fail at the point of failure immediately instead of creating workarounds. If a particular state or combination of variables could never occur, throw an exception or console log an error or whatever is appropriate.
- Handle external uncertainties gracefully (i.e., an API call fails, a file is not found, etc.), but be strict about internal logic. Don't create workarounds for failures in states or variables that we control internally.
- Simplify and favor Sources of Truth. If a particular state of the program requires that a particular component is active, and it's possible to check that the component is active, do not have a secondary variable tracking that it is active. If we ever have a state variable that can be determined more accurately by a reliable Source of Truth, omit it.
- Be precise. Don't create "multiple attempts" sequences for determining a particular state or value via multiple means if one doesn't work. There should not be "fallbacks" - if a particular state or value cannot be determined as expected, throw an exception or console log an error or whatever is appropriate.
- This project must be portable, so it is absolutely unacceptable to use full paths (i.e., from the `/home/user` directory or the `C:\` directory) in your commandsInstead, use relative paths from the project root directory such that this project can be run on any other machine.
- All code files should begin with a code block that explains the purpose of the file along with key components.
