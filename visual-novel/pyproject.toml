[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "japanese-visual-novel"
version = "0.1.0"
description = "A visual novel game for learning Japanese"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
dependencies = [
    # Core dependencies
    "streamlit==1.32.0",
    "tinydb==4.8.0",
    "pydantic==2.5.2",
    "python-dotenv==1.0.0",
    
    # API clients
    "openai==1.12.0",
    "httpx==0.25.2",
    
    # Image processing
    "pillow==10.1.0",
    
    # Japanese language processing
    "fugashi==1.3.0",
    "unidic-lite==1.0.8",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==7.4.3",
    "pytest-cov==4.1.0",
    
    # Linting and formatting
    "ruff==0.1.9",
    "mypy==1.7.1",
    
    # Type stubs
    "types-requests==2.31.0.10",
]

[tool.ruff]
# Enable pycodestyle (E), Pyflakes (F), isort (I), and black (B) rules
select = ["E", "F", "I", "B"]
line-length = 100
target-version = "py310"

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by formatter)
]

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "--verbose --cov=app"

[tool.coverage.run]
source = ["app"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
] 